# üöÄ JavaScript Promise Combinators

## üîπ Introduction
JavaScript provides several **Promise combinators** to handle multiple async tasks.  
They differ in **when they resolve/reject** and what results they return.  

---

## 1. `Promise.all`
- ‚úÖ Resolves when **all promises resolve** ‚Üí returns array of values.  
- ‚ùå Rejects immediately if **any promise rejects** (fail fast).  

```js
const p1 = Promise.resolve(10);
const p2 = Promise.resolve(20);
const p3 = Promise.reject("fail");

Promise.all([p1, p2])
  .then(values => console.log("‚úÖ all resolved:", values)); // [10, 20]

Promise.all([p1, p2, p3])
  .then(values => console.log(values))
  .catch(err => console.log("‚ùå one failed:", err)); // "fail"
```

üëâ **Use case:** When tasks are **independent** but you need **all results**.

---

## 2. `Promise.allSettled`
- Waits until **all promises settle** (resolved or rejected).  
- Never short-circuits.  
- Returns array of `{ status, value | reason }`.  

```js
const p1 = Promise.resolve(42);
const p2 = Promise.reject("error");
const p3 = Promise.resolve(100);

Promise.allSettled([p1, p2, p3])
  .then(results => console.log(results));
/*
[
  { status: "fulfilled", value: 42 },
  { status: "rejected", reason: "error" },
  { status: "fulfilled", value: 100 }
]
*/
```

üëâ **Use case:** Collect **all outcomes**, e.g., logging, retries, batch jobs.  

---

## 3. `Promise.race`
- Resolves/rejects with the **first settled promise**.  
- Doesn‚Äôt wait for others.  

```js
const slow = new Promise(res => setTimeout(() => res("slow"), 2000));
const fast = new Promise(res => setTimeout(() => res("fast"), 1000));

Promise.race([slow, fast])
  .then(value => console.log(value)); // "fast"
```

üëâ **Use case:** **Timeouts**, "first responder wins" scenarios.  

---

## 4. `Promise.any`
- Resolves with the **first fulfilled promise**.  
- Ignores rejections unless **all reject** ‚Üí then rejects with `AggregateError`.  

```js
const p1 = Promise.reject("fail1");
const p2 = Promise.reject("fail2");
const p3 = Promise.resolve("success");

Promise.any([p1, p2, p3])
  .then(value => console.log(value)) // "success"
  .catch(err => console.log(err));   // AggregateError if all fail
```

üëâ **Use case:** Only need **first success**, e.g., redundant API requests.  

---

## üîπ Comparison Table

| Method              | Resolves When                                | Rejects When                              | Use Case |
|---------------------|-----------------------------------------------|-------------------------------------------|----------|
| `Promise.all`       | All promises resolve ‚Üí array of results       | Any one rejects (immediate)                | Parallel tasks, need **all results** |
| `Promise.allSettled`| All promises settle (resolve/reject)          | Never rejects                              | Collect all outcomes |
| `Promise.race`      | First promise settles (resolve/reject)        | First rejection (if it comes first)        | Timeouts, fastest response |
| `Promise.any`       | First promise **fulfills**                    | All reject ‚Üí `AggregateError`              | First success is enough |

---

## üîπ Interview Mnemonics
- **All = All must succeed** (fail fast).  
- **AllSettled = Everyone reports in** (success + failure).  
- **Race = Winner decides** (first settle wins).  
- **Any = First success wins** (ignore losers unless all fail).  

---

## üîπ Tricky Edge Cases & Interview Questions

### 1. What happens if you pass an **empty array**?
- `Promise.all([])` ‚Üí Resolves immediately with `[]`.  
- `Promise.allSettled([])` ‚Üí Resolves immediately with `[]`.  
- `Promise.race([])` ‚Üí Stays **pending forever**.  
- `Promise.any([])` ‚Üí Rejects immediately with `AggregateError: All promises were rejected`.

---

### 2. What if you pass **non-Promise values**?
All combinators treat non-Promise values as **already resolved Promises**.  

```js
Promise.all([1, 2, 3]).then(console.log); // [1, 2, 3]
Promise.any([1, Promise.reject("x")]).then(console.log); // 1
```

---

### 3. Difference between `Promise.race` and `Promise.any`?
- `race` ‚Üí First settled (resolve OR reject).  
- `any` ‚Üí First fulfilled (ignores rejections unless all reject).  

---

### 4. How to implement a **timeout with `Promise.race`**?
```js
function withTimeout(promise, ms) {
  const timeout = new Promise((_, reject) =>
    setTimeout(() => reject(new Error("‚è∞ Timeout!")), ms)
  );
  return Promise.race([promise, timeout]);
}
```

---

### 5. Which combinator ensures **no unhandled rejection warnings**?
- `Promise.allSettled` ensures all rejections are captured inside `{ status: "rejected" }`.  

---

‚úÖ Quick recap before interview:
- Use **`all`** for all successes.  
- Use **`allSettled`** to always get results.  
- Use **`race`** for fastest result.  
- Use **`any`** for first success.  
- Remember tricky cases: empty array, non-promise values, timeout pattern.  

---
